rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /* Public Registration: allow reads (for admin page) and creates with basic validation */
    match /registrations/{docId} {
      allow read: if true;
      allow create: if
        request.time < timestamp.date(2025, 12, 31) &&
        request.resource.data.username is string &&
        request.resource.data.username.size() >= 2 &&
        request.resource.data.course in ['Degree / UG', 'PG', 'PUC / 12th / ISC / CBSE'] &&
        request.resource.data.college is string &&
        request.resource.data.college.size() >= 2 &&
        request.resource.data.phone is string &&
        request.resource.data.phone.matches('^\\d{10,15}$') &&
        request.resource.data.shortId is string &&
        request.resource.data.shortId.matches('^\\d{3}$') &&
        request.resource.data.ip is string &&
        request.resource.data.keys().hasOnly(['username','course','college','phone','ip','shortId','createdAt','hasSelectedEvents','eventSelectionId']);

      /* allow updating payment, RSVP, and event selection fields */
      allow update: if
        request.resource.data.diff(resource.data).changedKeys().hasOnly(['paymentMode','paymentAt','rsvpDownloaded','rsvpDownloadedAt','adminGenerated','paymentUpdatedAt','paymentUpdatedBy','hasSelectedEvents','eventSelectionId','eventSelections','totalAmount','eventSelectionTimestamp','paymentApproved','paymentApprovedAt','paymentApprovedBy','paymentType','transactionId','receiptNo']) &&
        (request.resource.data.paymentMode == null || request.resource.data.paymentMode in ['onspot','online']) &&
        (request.resource.data.paymentApproved == null || request.resource.data.paymentApproved is bool) &&
        (request.resource.data.paymentApprovedBy == null || request.resource.data.paymentApprovedBy is string) &&
        (request.resource.data.paymentType == null || request.resource.data.paymentType in ['cash','upi']) &&
        (request.resource.data.transactionId == null || request.resource.data.transactionId is string) &&
        (request.resource.data.receiptNo == null || request.resource.data.receiptNo is string);

      /* prevent deletes from the public */
      allow delete: if false;
    }

    /* Error logs: allow create from clients, reads for admin UI usage */
    match /errorLogs/{docId} {
      allow create: if request.resource.data.type is string &&
                     request.resource.data.message is string &&
                     request.resource.data.keys().hasAny(['details','timestamp','type','message']);
      allow read: if true; // set to false if you don't want to expose error logs publicly
      allow update, delete: if false;
    }

    /* Payment/mode selections: allow create from success page */
    match /payments/{docId} {
      allow create: if request.resource.data.tokenNo is string &&
                     request.resource.data.username is string &&
                     request.resource.data.mode in ['onspot', 'online'] &&
                     request.resource.data.keys().hasOnly(['tokenNo','username','mode','createdAt']);
      allow read: if true; // for admin panel access
      allow update, delete: if false;
    }

    /* RSVP Downloads: allow create from success page and admin panel */
    match /rsvpDownloads/{docId} {
      allow create: if request.resource.data.tokenNo is string &&
                     request.resource.data.username is string &&
                     request.resource.data.paymentMode in ['onspot', 'online'] &&
                     request.resource.data.downloadType in ['user_download', 'admin_generated'] &&
                     request.resource.data.keys().hasOnly(['tokenNo','username','paymentMode','downloadedAt','downloadType']);
      allow read: if true; // for admin panel access
      allow update, delete: if false;
    }

    /* Event Selections: allow create and read for event selection flow */
    match /eventSelections/{docId} {
      allow create: if request.resource.data.userId is string &&
                     request.resource.data.userToken is string &&
                     request.resource.data.userToken.matches('^\\d{3}$') &&
                     request.resource.data.selections is list &&
                     request.resource.data.totalAmount is number &&
                     request.resource.data.totalAmount >= 0 &&
                     request.resource.data.paymentStatus in ['pending', 'completed', 'failed'] &&
                     request.resource.data.keys().hasOnly(['userId','userToken','selections','totalAmount','createdAt','updatedAt','paymentStatus']);
      
      allow read: if true; // for admin panel access
      
      /* allow updating payment status only */
      allow update: if request.resource.data.diff(resource.data).changedKeys().hasOnly(['paymentStatus','updatedAt']) &&
                     request.resource.data.paymentStatus in ['pending', 'completed', 'failed'];
      
      allow delete: if false;
    }

    /* Events Master Data: allow read for event selection page */
    match /events/{docId} {
      allow read: if true; // public read access for event selection
      allow create, update: if false; // only admin should manage events via console
      allow delete: if false;
    }

    /* Deny everything else by default */
    match /{document=**} {
      allow read, write: if false;
    }
  }
}